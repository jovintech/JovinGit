name: Build and Release JovinGit

on:
  push:
    branches: [main]
    tags: ['v*']  # Tags devem começar com 'v'
  pull_request:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y cmake g++ pkg-config libgtkmm-3.0-dev
          
      - name: Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          
      - name: Rename Artifact
        id: rename_linux
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            mv build/JovinGit build/JovinGit-$VERSION
            echo "artifact_name=JovinGit-$VERSION" >> $GITHUB_OUTPUT
          else
            echo "artifact_name=JovinGit" >> $GITHUB_OUTPUT
          fi
          
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-bin
          path: build/${{ steps.rename_linux.outputs.artifact_name }}

  build-windows:
    runs-on: windows-latest
    needs: build-linux  # Executa após o build Linux
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gtkmm3
          
      - name: Build with MSYS2
        shell: msys2 {0}
        run: |
          mkdir build-win
          cd build-win
          cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release
          
      - name: Rename Windows Artifact
        id: rename_win
        run: |
          $version = $env:GITHUB_REF -replace 'refs/tags/'
          if ($env:GITHUB_REF -like 'refs/tags/*') {
            Rename-Item build-win/JovinGit.exe "JovinGit-$version.exe"
            echo "artifact_name=JovinGit-$version.exe" >> $env:GITHUB_OUTPUT
          } else {
            echo "artifact_name=JovinGit.exe" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh
          
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-bin
          path: build-win/${{ steps.rename_win.outputs.artifact_name }}

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Get release assets
        id: get_assets
        run: |
          echo "linux_artifact=linux-bin" >> $GITHUB_OUTPUT
          echo "windows_artifact=windows-bin" >> $GITHUB_OUTPUT
          
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.get_assets.outputs.linux_artifact }}
          path: release-assets
          
      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.get_assets.outputs.windows_artifact }}
          path: release-assets
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/${{ steps.get_assets.outputs.linux_artifact }}
          asset_name: ${{ steps.get_assets.outputs.linux_artifact }}
          asset_content_type: application/octet-stream
          
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release-assets/${{ steps.get_assets.outputs.windows_artifact }}
          asset_name: ${{ steps.get_assets.outputs.windows_artifact }}
          asset_content_type: application/vnd.microsoft.portable-executable
